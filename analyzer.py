import pandas as pd

# --- CONFIGURATION ---
# This is the file generated by your data collection script.
DATA_FILE = 'analyzed_odds_data.csv'


def decimal_to_american(decimal_odds):
    """Converts decimal odds to American odds."""
    if pd.isna(decimal_odds):
        return None
    if decimal_odds >= 2.0:
        return int((decimal_odds - 1) * 100)
    else:
        return int(-100 / (decimal_odds - 1))

def american_to_implied_prob(american_odds):
    """Converts American odds to implied probability."""
    if pd.isna(american_odds):
        return 0
    if american_odds > 0:
        return 100 / (american_odds + 100)
    else:
        return abs(american_odds) / (abs(american_odds) + 100)

def analyze_sharpness(df):
    """
    Calculates the 'error' for each recorded odd against the actual game result.
    Lower error indicates a 'sharper' line.
    """
    # --- Moneyline (Brier Score) ---
    # Convert decimal odds to American first for the probability calculation
    df['h2h_home_price_american'] = df['h2h_home_price'].apply(decimal_to_american)
    
    # Calculate implied probability and determine if the home team won
    df['home_win_prob'] = df['h2h_home_price_american'].apply(american_to_implied_prob)
    df['home_team_won'] = (df['home_score'] > df['away_score']).astype(int)
    
    # Brier score measures the accuracy of a probabilistic prediction. Lower is better.
    df['brier_score_moneyline'] = (df['home_win_prob'] - df['home_team_won'])**2

    # --- Spread (Absolute Error) ---
    # Calculate the actual point difference and find the error vs. the book's spread
    df['point_difference'] = df['home_score'] - df['away_score']
    df['spread_error'] = (df['point_difference'] - (df['spread_home_point'])).abs()

    # --- Totals (Absolute Error) ---
    # Calculate the actual total points and find the error vs. the book's total
    df['total_points'] = df['home_score'] + df['away_score']
    df['total_error'] = (df['total_points'] - df['total_over_point']).abs()
    
    return df


def main():
    """
    Loads the collected odds data, analyzes it to find the sharpest books,
    and prints the rankings for each market.
    """
    print(f"üïµÔ∏è‚Äç‚ôÇÔ∏è Starting analysis of '{DATA_FILE}'...")

    try:
        # Load the data, dropping any rows that are missing critical information
        df = pd.read_csv(DATA_FILE)
        df.dropna(subset=['h2h_home_price', 'spread_home_point', 'total_over_point'], inplace=True)
        print(f"‚úÖ Loaded {len(df)} complete betting records for analysis.")
    except FileNotFoundError:
        print(f"‚ùå ERROR: Data file not found! Make sure '{DATA_FILE}' is in the same folder.")
        return

    if df.empty:
        print("No complete data to analyze. Exiting.")
        return

    # Calculate the sharpness metrics for all three markets
    analyzed_df = analyze_sharpness(df)

    print("\n\n--- üèÜ FINAL SHARPNESS RANKINGS (Lower is Better) üèÜ ---\n")

    # --- Moneyline Ranking ---
    moneyline_ranking = analyzed_df.groupby('bookmaker')['brier_score_moneyline'].mean().sort_values(ascending=True)
    print("--- üß† Sharpest Books for Moneyline (by Brier Score) ---")
    print(moneyline_ranking.to_string())
    print("\n" + "="*50 + "\n")

    # --- Spread Ranking ---
    spread_ranking = analyzed_df.groupby('bookmaker')['spread_error'].mean().sort_values(ascending=True)
    print("--- üéØ Sharpest Books for Spreads (by Avg. Point Error) ---")
    print(spread_ranking.to_string())
    print("\n" + "="*50 + "\n")

    # --- Total Ranking ---
    total_ranking = analyzed_df.groupby('bookmaker')['total_error'].mean().sort_values(ascending=True)
    print("--- ‚öñÔ∏è Sharpest Books for Totals (by Avg. Point Error) ---")
    print(total_ranking.to_string())


if __name__ == '__main__':
    main()